package catalogue;

import oracle.kv.*;
import oracle.kv.table.Row;
import oracle.kv.table.Table;
import oracle.kv.table.TableAPI;

import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.StringTokenizer;

public class ImportCatalogue {
    private final KVStore store;
    private final String tableName = "catalogue";
    private final String pathToCSVFile = "/vagrant/TPT-data/catalogue/Catalogue.csv";

    /**
     * Runs the DDL command line program.
     */
    public static void main(String args[]) {
        try {
            ImportCatalogue catalogue = new ImportCatalogue(args);
            catalogue.initCatalogueTableAndData(catalogue);
        } catch (RuntimeException e) {
            e.printStackTrace();
        }
    }

    /**
     * Parses command line args and opens the KVStore.
     */
    ImportCatalogue(String[] argv) {
        String storeName = "kvstore";
        String hostName = "localhost";
        String hostPort = "5000";
        final int nArgs = argv.length;
        int argc = 0;
        store = KVStoreFactory.getStore
                (new KVStoreConfig(storeName, hostName + ":" + hostPort));
    }

    /**
     * Affichage du résultat pour les commandes DDL (CREATE, ALTER, DROP)
     */
    private void displayResult(StatementResult result, String statement) {
        System.out.println("===========================");
        if (result.isSuccessful()) {
            System.out.println("Statement was successful:\n\t" +
                    statement);
            System.out.println("Results:\n\t" + result.getInfo());
        } else if (result.isCancelled()) {
            System.out.println("Statement was cancelled:\n\t" +
                    statement);
        } else {
            /*
             * statement was not successful: may be in error, or may still
             * be in progress.
             */
            if (result.isDone()) {
                System.out.println("Statement failed:\n\t" + statement);
                System.out.println("Problem:\n\t" +
                        result.getErrorMessage());
            } else {
                System.out.println("Statement in progress:\n\t" +
                        statement);
                System.out.println("Status:\n\t" + result.getInfo());
            }
        }
    }

    /*
        La méthode initcatalogueTableAndData permet :
        - de supprimer les tables si elles existent
        - de créer des tables
        - de charger les données des catalogues
    **/
    public void initCatalogueTableAndData(ImportCatalogue catalogue) {
        catalogue.dropCatalogueTable();
        catalogue.createCatalogueTable();
        catalogue.loadCatalogueDataFromFile(this.pathToCSVFile);
    }

    /**
     * public void dropcatalogueTable()
     * M&thode de suppression de la table catalogue.
     */
    public void dropCatalogueTable() {
        String  statement = "drop table " +this. tableName;
        executeDDL(statement);
    }

    /**
     * public void createcatalogueTable()
     * M&thode de création de la table catalogue.
     */
    public void createCatalogueTable() {
        String statement = "Create table " + this.tableName + " ("
                + "marque string,"
                + "nom string," 
                + "puissance integer,"
                + "longueur string,"
                + "nbPlaces integer,"
                + "nbPortes integer,"
                + "couleur string,"
                + "occasion boolean,"  
                + "prix integer,"
                + " id number generated by default as identity,"
                + "primary key (id))";
        executeDDL(statement);
    }

    
    /**
     * void loadcatalogueDataFromFile(String catalogueDataFileName)
     * cette methodes permet de charger les catalogues depuis le fichier
     * appelé catalogue.csv.
     * Pour chaque catalogue chargée, la
     * méthode insertCatalogueRow sera appélée
     */
    void loadCatalogueDataFromFile(String catalogueDataFileName) {
        InputStreamReader ipsr;
        BufferedReader br = null;
        InputStream ips;
        // Variables pour stocker les données lues d'un fichier.
        String ligne;
        System.out.println("********************************** Dans : loadCatalogueDataFromFile *********************************");
        /* parcourir les lignes du fichier texte et découper chaque ligne */
        try {
            ips = new FileInputStream(catalogueDataFileName);
            ipsr = new InputStreamReader(ips);
            br = new BufferedReader(ipsr);
            /* open text file to read data */
            //parcourir le fichier ligne par ligne et découper chaque ligne en
            //morceau séparés par le symbole ;
            while ((ligne = br.readLine()) != null) { 
                if(ligne.contains("marque") && ligne.contains("nom") && ligne.contains("prix") && ligne.contains("couleur")){
                    continue ; 
                }
                ArrayList<String> catalogueRecord = new ArrayList<String>();
                StringTokenizer val = new StringTokenizer(ligne, ",");
                while (val.hasMoreTokens()) {
                    catalogueRecord.add(val.nextToken().toString());
                } 
                String marque = catalogueRecord.get(0);
                String nom = catalogueRecord.get(1);
                String puissance = catalogueRecord.get(2);
                String longueur = catalogueRecord.get(3);
                String nbPlaces = catalogueRecord.get(4);
                String nbPortes = catalogueRecord.get(5);
                String couleur = catalogueRecord.get(6);
                String occasion = catalogueRecord.get(7);
                String prix = catalogueRecord.get(8);
                // Add the catalogue in the KVStore
                this.insertCatalogueRow(marque, nom, Integer.parseInt(puissance), longueur, Integer.parseInt(nbPlaces), Integer.parseInt(nbPortes), couleur, Boolean.parseBoolean(occasion), Integer.parseInt(prix));
            }
            br.close();
            ipsr.close();
            ips.close();
        } catch (Exception e) { 
            e.printStackTrace();
        }
    }

    /**
     * public void executeDDL(String statement)
     * méthode générique pour executer les commandes DDL de façcon asynchrone
     */
    public void executeDDL(String statement) { 
        StatementResult result = null;

        System.out.println("****** Dans : executeDDL ********");
        try { 
            result = store.executeSync(statement);
            displayResult(result, statement);
        } catch (IllegalArgumentException e) {
            System.out.println("Invalid statement:\n" + e.getMessage());
        } catch (FaultException e) {
            System.out.println("Statement couldn't be executed, please retry: " + e);
        }
    }

    private void insertCatalogueRow(String marque, String nom, int puissance, String longueur, int nbPlaces, int nbPortes, String couleur, Boolean occasion, int prix) {

        System.out.println("********************************** Dans : insertCatalogueRow *********************************");

        try {
            TableAPI tableH = store.getTableAPI(); 
            // Get a Row instance to put data
            Row catalogueRow = tableH.getTable(tableName).createRow(); 

            // Create one row
            catalogueRow.put("marque", marque);
            catalogueRow.put("nom", nom);
            catalogueRow.put("puissance", puissance);
            catalogueRow.put("longueur", longueur);
            catalogueRow.put("nbPlaces", nbPlaces);
            catalogueRow.put("nbPortes", nbPortes);
            catalogueRow.put("couleur", couleur);
            catalogueRow.put("occasion", occasion);
            catalogueRow.put("prix", prix);

            // Now write the table to the store.
            // "item" is the row's primary key. If we had not set that value,
            // this operation will throw an IllegalArgumentException.
            tableH.put(catalogueRow, null, null);

        } catch (IllegalArgumentException e) {
            System.out.println("Invalid statement:\n" + e.getMessage());
        } catch (FaultException e) {
            System.out.println("Statement couldn't be executed, please retry: " + e);
        }
    }

}
